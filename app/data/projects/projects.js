/*
------ custom tokens --------
%%b{} - for bold text
%%a{link[display]} - for links
%%n - newline

NOTE - tabbing down with `s causes \n
NOTE - new lines just make spaces by default, so making my own
*/

const FractalVoyager = {
  title: `Fractal Voyager`,
  subtitle: `CS Honors Thesis, advised by Kevin Angstadt`,
  buttons: [
    {
      link: "https://fractalvoyager.github.io/",

      display: "Website",
    },
    {
      link: "https://github.com/FractalVoyager",
      display: "Source Code",
    },
    {
      link: "files/fv/poster.pdf",
      display: "Poster",
    },
    {
      link: "files/fv/paper.pdf",
      display: "Paper",
    },
  ],
  content: `
  Fractal Voyager is a fractal generating web application to assist
  in %%a{https://en.wikipedia.org/wiki/Complex_dynamics[complex dynamics]} research. 
  It includes a simple scripting langauge based on 
  %%a{https://pi.math.cornell.edu/~noonan/fstream.html[Fractal Stream]}.
  This langauge, in conjuction with app features, enables users to
  generate and explore fractals based on inputted scripts representing
  iterative functions and conditions.
  `,
  folds: [
    {
      isFoldInFold: false,
      title: `Learn why Fractal Voyager is fast (WebAssembly)`,
      content: `
      Fractal Voyager provides an innovative application of %%a{https://webassembly.org/[WebAssembly]} 
      . A source-to-source compiler translates custom scripts to C++,
      which can generate an array representation of the complex plane
      with color values. This compiler is compiled to WebAssembly
      allowing scripts to be enetered and compiled on the web. Then, the
      C++ that was generated is compiled to WebAssembly. This step is
      particularly tricky, and uses the core functionality of an 
      %%a{https://github.com/jprendes/emception[in-browser C++ code editor]}.
      Finally, the WebAssembly is run on the web to generate fractals.
      `,
    },
    {
      isFoldInFold: true,
      title: `Learn about the math`,
      content: `
      The language and application supports paramter and dynamical plane fractals, 
      along with point orbit visualizations. The parameter plane is the complex plane 
      when a function is iterated until a condition is met with respect to a fixed point. 
      For example, z = z^2+c. It includes the paramter, c*, which changes with respect 
      to the passed in point across the complex plane. The dynamical plane is the complex 
      plane when a function is iterated until a condition is met with respect to a 
      variable point, z, that changes with respect to the passed in point across the 
      complex plane. For example, z = z^2 − 0.79 + 0.15i. A complex number’s orbit 
      for a particular dynamical system is the value of the number after each iteration 
      of the function.`,
      innerFold: {
        isFoldInFold: false,
        title: `See more about the app`,
        content: `
        The compiled WebAssembly is paramterized, allowing users to
        explore a function without needed to recompile. A key
        feature of this is switching between the paramter plane and
        dynamical plane by selected a point to fix the c value. One
        can also select a point in the dynamical plane to see
        it's orbit, all done without needing to write a new
        script. A dynamical plane fractal can also be generated by
        writing a script without a c value. {"\n"}
        The fractal images can be altered by changing the
        breakpoints of the funciton conditions. For example, one
        condition that can be put on a funciton is "until z
        stops", which means consider a point in the fractal set
        if z never converges. For this condition, one can alter the
        epsilon value: the difference between the current value of z
        versus the last value of z to say the function converged.
        `,
      },
    },
  ],
};

const projects = [FractalVoyager];

export { projects };
